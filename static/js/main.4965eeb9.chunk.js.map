{"version":3,"sources":["components/Findcity.js","components/ShowResult.js","components/AirImage.js","App.js","serviceWorker.js","index.js"],"names":["Findcity","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","city","target","value","handleSubmit","preventDefault","state","trim","_sendDate","onCreate","inputRef","focus","_this2","react_default","a","createElement","className","onSubmit","Form_default","Control","type","onChange","name","placeholder","ref","input","Button_default","variant","PureComponent","ShowResult","airInfo","Fragment","airIndex","ListGroup_default","Item","time","quality","Component","AirImage","_airQualityImg","imgSrc","Image_default","src","rounded","App","_callApi","fetch","concat","then","response","json","result","status","_setAirState","data","iaqi","pm25","v","s","error","isLoaded","console","log","_quality","handleCreate","_this$state","components_Findcity","components_ShowResult","components_AirImage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4965eeb9.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport '../css/Findcity.css';\r\n\r\nclass Findcity extends PureComponent{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n          city:''\r\n        };\r\n    }\r\n\r\n    // input 입력할때마다 state 변경 \r\n    handleChange = (event) => {\r\n        this.setState(\r\n             {city: event.target.value}\r\n        );   \r\n    }\r\n\r\n    // sumit 할때 입력한 city data 전송 \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        // 앞 뒤 공백 없애주기\r\n        const city = this.state.city.trim();\r\n        this._sendDate(city);\r\n    }\r\n\r\n    _sendDate = (city) => {\r\n        this.props.onCreate(city);\r\n        this.setState({\r\n            // 전송 후 상태초기화\r\n            city: ''\r\n        });   \r\n        // 전송 후 inputBox에서 커서 위치 \r\n        this.inputRef.focus();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='findCity'>\r\n                <h3 className=\"text\">Find air quality your area!</h3>\r\n                <form className=\"schForm\" onSubmit={this.handleSubmit}>\r\n                    <Form.Control type=\"text\" \r\n                        value={this.state.city} \r\n                        onChange={this.handleChange}\r\n                        name=\"city\"\r\n                        placeholder=\"city\" \r\n                        ref={(input) => {this.inputRef = input; }}\r\n                    />\r\n                    <Button type=\"submit\" variant=\"info\" className=\"schBtn\">Search</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Findcity;\r\n","import React, {Component} from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport '../css/ShowResult.css';\r\n\r\n\r\nclass ShowResult extends Component{\r\n\r\n    render(){\r\n        const city = this.props.city;\r\n        const airInfo = this.props.airInfo;\r\n\r\n        // 결과값을 정상으로 받아올때와 null 일때 분리\r\n        return(\r\n            <>\r\n            { city!= null && airInfo.airIndex != null ? (\r\n                <div className=\"showResult\">\r\n                <div className='resultBox'>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>Location  :  {city}</ListGroup.Item>\r\n                        <ListGroup.Item>Time of Measurement :  {airInfo.time}</ListGroup.Item>\r\n                        <ListGroup.Item>Air Quality  :  {airInfo.airIndex}pm</ListGroup.Item>\r\n                    </ListGroup>\r\n                </div>\r\n\r\n                <div className={airInfo.quality}>\r\n                The air quality in {city} is <em>{airInfo.quality}</em>\r\n                </div>\r\n            </div>\r\n            ) : (\r\n                <div className='resultBox'>\r\n                    <div className='cityError'>Please put correct city name.</div>\r\n                    <div className='default'>Find if your city has good air quality!</div>\r\n                </div>\r\n            )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowResult;","import React, {Component} from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport '../css/AirImage.css';\r\n\r\nclass AirImage extends Component{\r\n\r\n    _airQualityImg = (quality) =>{\r\n        // quality 파라미터로 받아서 switch문 사용하여 image 주소 반환 \r\n        switch(quality){\r\n            case 'None':\r\n                return 'https://media.tenor.com/images/d1c81eafdc947e7ad1989da43bc65f32/tenor.png';\r\n            case 'Good':\r\n                return 'http://vincenthills.info/wp-content/uploads/2009/08/iStock_000010003815Small.jpg';    \r\n            case 'Moderate':\r\n                return 'https://www1.uwe.ac.uk/et/images/aqmrc_banner.jpg';   \r\n            case 'Unhealthy for Sensitive Groups':\r\n                return 'http://img.hani.co.kr/imgdb/resize/2019/0115/154745436225_20190115.JPG';   \r\n            case 'Unhealthy':\r\n                return 'https://images.theconversation.com/files/246971/original/file-20181123-149718-3nhrdw.jpg?ixlib=rb-1.1.0&rect=0%2C869%2C4054%2C1849&q=45&auto=format&w=1356&h=668&fit=crop';    \r\n            case 'Hazardous':\r\n                return 'http://www.prior-scientific.co.uk/wp-content/uploads/2018/09/Photochemical-Smog.jpg';   \r\n            default:\r\n                return 'http://www.morpc.org/wordpress/wp-content/uploads/2017/12/AQi_Metered-Version_GR2-01-1024x550.png';\r\n        }\r\n    }\r\n  \r\n    render(){\r\n        const quality = this.props.airInfo.quality;\r\n        const imgSrc = this._airQualityImg(quality);\r\n        \r\n        return (\r\n            <Image className=\"airImg\" src={imgSrc} rounded/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AirImage;","import React, {PureComponent} from 'react';\nimport './css/App.css';\nimport Findcity from './components/Findcity';\nimport ShowResult from './components/ShowResult';\nimport AirImage from './components/AirImage';\n\nclass App extends PureComponent{\n\n  constructor(props){\n    super(props);\n    this.state={\n      isLoaded: true,\n      city: null,\n      airInfo: {\n        airIndex:null,\n        time:null,\n        quality:null\n      }\n    };\n  }\n\n  // Getting data from Api \n  _callApi = (city) => {\n    return fetch(`https://api.waqi.info/feed/${city}/?token=a52f054e9b618ef2f10a33155f2f3e4cd50ef1d7`)\n    .then(response => response.json())\n    .then(\n      (result) => {\n        if(result.status === 'ok'){\n          // Ajax Load는 성공& 결과값 정상, pm25&time 값 보내주기 \n          this._setAirState(result.data.iaqi.pm25.v, result.data.time.s);\n        }else{\n          // Ajax Load는 성공했으나, 결과값이 없을때\n          this._setAirState(null, null);\n        }\n      },\n      (error) => {\n        // error일 경우 load를 fail로 \n        this.setState({\n          isLoaded: false\n        });\n        console.log(error);\n      }\n    )\n  }\n \n  //setState after getting data \n  _setAirState = (airIndex, time) => {\n    // pm25(index)값에 따라 quality 설정 \n    let _quality = '';\n    if(airIndex == null){\n      _quality = 'None';\n    }else if(airIndex <= 50){\n      _quality = 'Good';   \n    }else if(airIndex <= 100){\n      _quality = 'Moderate';\n    }else if(airIndex <= 150){\n      _quality = 'Unhealthy for Sensitive Groups';\n    }else if(airIndex <= 200){\n      _quality = 'Unhealthy';\n    }else if( airIndex<= 250){\n      _quality = 'Very Unhealthy';\n    }else{\n      _quality = 'Hazardous';\n    }\n    this.setState(\n      {\n        isLoaded : true,\n        airInfo:{\n          airIndex: airIndex,\n          time: time,\n          quality: _quality\n        }     \n      }\n    )\n  }\n\n  // setState city after getting cityName\n  handleCreate = (data) => {\n    // 자식 컴포넌트에서 city 값 받아서 setState\n    this.setState(\n      {\n        city:data\n      }\n    )\n    // city 값에 따른 미세먼지값 받아오는 API 함수\n    this._callApi(data);\n  }\n\n\n  render(){\n    const {isLoaded, city, airInfo} = this.state;\n\n    return(\n      <div className='container'>\n        <div className='leftBox'>\n          <Findcity onCreate={this.handleCreate} />\n          {isLoaded ? (\n            <ShowResult city={city} airInfo={airInfo}/>\n          ) : (\n            <div className='errorMessage'>\n              Failed to load Data. Please try again.\n            </div>\n          )}\n        </div>\n        {isLoaded ? (\n          <div className='rightBox'>\n            <AirImage airInfo={airInfo}/>\n          </div>\n          ) : (null)}        \n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}